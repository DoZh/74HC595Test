
bin/Debug/74HC595Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000168  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000168  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  000001fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         000006cc  00000000  00000000  00000200  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000081  00000000  00000000  000008cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000080  00000000  00000000  00000950  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000003fd  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000187  00000000  00000000  00000dcd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000246  00000000  00000000  00000f54  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000094  00000000  00000000  0000119c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000000da  00000000  00000000  00001230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000106  00000000  00000000  0000130a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e6       	ldi	r30, 0x68	; 104
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	11 e0       	ldi	r17, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b1 07       	cpc	r27, r17
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 b2 00 	jmp	0x164	; 0x164 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:

#include <avr/io.h>
#include <avr/delay.h>

int main(void)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
    SPI_MasterInit();
  ae:	88 e6       	ldi	r24, 0x68	; 104
  b0:	90 e0       	ldi	r25, 0x00	; 0
  b2:	fc 01       	movw	r30, r24
  b4:	09 95       	icall


    // Insert code

    SPI595Out(0x5a);
  b6:	23 e9       	ldi	r18, 0x93	; 147
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	8a e5       	ldi	r24, 0x5A	; 90
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	f9 01       	movw	r30, r18
  c0:	09 95       	icall
    SPI595Out(0x5a);
  c2:	23 e9       	ldi	r18, 0x93	; 147
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	8a e5       	ldi	r24, 0x5A	; 90
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	f9 01       	movw	r30, r18
  cc:	09 95       	icall

    while(1)
    {
        //SPI595Out(0x55);
        //PORTB=~PORTB;
    }
  ce:	ff cf       	rjmp	.-2      	; 0xce <main+0x28>

000000d0 <SPI_MasterInit>:
}



void SPI_MasterInit(void)
{
  d0:	cf 93       	push	r28
  d2:	df 93       	push	r29
  d4:	cd b7       	in	r28, 0x3d	; 61
  d6:	de b7       	in	r29, 0x3e	; 62
	/*设置SS,MOSI和SCK为输出，其他为输入*/
	DDRB |= (1<<PB3)|(1<<PB5)|(1<<PB2);
  d8:	84 e2       	ldi	r24, 0x24	; 36
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	24 e2       	ldi	r18, 0x24	; 36
  de:	30 e0       	ldi	r19, 0x00	; 0
  e0:	f9 01       	movw	r30, r18
  e2:	20 81       	ld	r18, Z
  e4:	2c 62       	ori	r18, 0x2C	; 44
  e6:	fc 01       	movw	r30, r24
  e8:	20 83       	st	Z, r18
	//PORTB &= ~(1<<PB2);
	/* SPI主机，fck/4 .模式0*/
	SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR0)|(0<<SPR1)|(0<<CPOL)|(0<<CPHA);
  ea:	8c e4       	ldi	r24, 0x4C	; 76
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	20 e5       	ldi	r18, 0x50	; 80
  f0:	fc 01       	movw	r30, r24
  f2:	20 83       	st	Z, r18
}
  f4:	df 91       	pop	r29
  f6:	cf 91       	pop	r28
  f8:	08 95       	ret

000000fa <SPI_MasterTransmit>:

void SPI_MasterTransmit(char cData)
{
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	0f 92       	push	r0
 100:	cd b7       	in	r28, 0x3d	; 61
 102:	de b7       	in	r29, 0x3e	; 62
 104:	89 83       	std	Y+1, r24	; 0x01
	/* 启动数据传输*/
	SPDR = cData;
 106:	8e e4       	ldi	r24, 0x4E	; 78
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	29 81       	ldd	r18, Y+1	; 0x01
 10c:	fc 01       	movw	r30, r24
 10e:	20 83       	st	Z, r18
	/* 等待传输结束*/
	while(!(SPSR & (1<<SPIF)))
 110:	00 00       	nop
 112:	8d e4       	ldi	r24, 0x4D	; 77
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	fc 01       	movw	r30, r24
 118:	80 81       	ld	r24, Z
 11a:	88 23       	and	r24, r24
 11c:	d4 f7       	brge	.-12     	; 0x112 <SPI_MasterTransmit+0x18>
        ;
}
 11e:	0f 90       	pop	r0
 120:	df 91       	pop	r29
 122:	cf 91       	pop	r28
 124:	08 95       	ret

00000126 <SPI595Out>:

void SPI595Out(uint8_t i)

{
 126:	cf 93       	push	r28
 128:	df 93       	push	r29
 12a:	0f 92       	push	r0
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	89 83       	std	Y+1, r24	; 0x01

   PORTB&=~(1<<PB2);             //等待数据传输，595存储寄存器数据不变
 132:	85 e2       	ldi	r24, 0x25	; 37
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	25 e2       	ldi	r18, 0x25	; 37
 138:	30 e0       	ldi	r19, 0x00	; 0
 13a:	f9 01       	movw	r30, r18
 13c:	20 81       	ld	r18, Z
 13e:	2b 7f       	andi	r18, 0xFB	; 251
 140:	fc 01       	movw	r30, r24
 142:	20 83       	st	Z, r18

   SPI_MasterTransmit(i);        //传输数据
 144:	89 81       	ldd	r24, Y+1	; 0x01
 146:	0e 94 7d 00 	call	0xfa	; 0xfa <SPI_MasterTransmit>


   PORTB|=(1<<PB2);              //595移位寄存器的数据进入数据存储寄存器，并在数码管上显示
 14a:	85 e2       	ldi	r24, 0x25	; 37
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	25 e2       	ldi	r18, 0x25	; 37
 150:	30 e0       	ldi	r19, 0x00	; 0
 152:	f9 01       	movw	r30, r18
 154:	20 81       	ld	r18, Z
 156:	24 60       	ori	r18, 0x04	; 4
 158:	fc 01       	movw	r30, r24
 15a:	20 83       	st	Z, r18

}
 15c:	0f 90       	pop	r0
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	08 95       	ret

00000164 <_exit>:
 164:	f8 94       	cli

00000166 <__stop_program>:
 166:	ff cf       	rjmp	.-2      	; 0x166 <__stop_program>
